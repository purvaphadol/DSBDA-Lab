# -*- coding: utf-8 -*-
"""a1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gVJHBeXRP8sr8soC1FKzwcjWKaXcTr3Z

Perform the following operations using Python on Iris data set.
1. Load the Dataset into pandas data frame.
2. Display information about missing values in the data.
3. Display initial statistics.
4. Check the dimensions of the data frame.
5. Display data type of the variable.
6. Apply proper data type conversion.
7. Convert categorical variables into quantitative variables using one hot encoding and label encoder.
"""

#importing the libraries
import pandas as pd

"""1. Load the Dataset into pandas data frame."""

df=pd.read_csv("Iris.csv")
df

"""2. Display information about missing values in the data"""

#check for missing values in the data using pandas isnull() function
print("Missing values in the data using pandas isnull() function")
df.isnull()

#check for not null values in the data using pandas notnull() function
print("Not null values in the data using pandas notnull() function")
df.notnull()

#count the number of missing values in each column of a Pandas dataframe.
df.isnull().sum()

"""3. Display initial statistics."""

#using pandas describe() function to get some initial statistics
#The describe() method returns description of the data in the DataFrame.
print("Description of the data in the DataFrame.")
df.describe()

#The info() method prints information about the DataFrame.
print("The information about the DataFrame.")
df.info()

#To display the first five rows of your DataFrame
df.head()

#check the shape of a DataFrame
print("Shape of a DataFrame")
df.shape

"""4. Check the dimensions of the data frame."""

#check the dimensions of the data frame.
#The ndim property is used to get an int representing the number of axes/array dimensions of dataframe
print("Dimensions of a DataFrame")
df.ndim

"""5. Display data type of the variable."""

#check the datatypes in the DataFrame
print("Datatypes in the DataFrame")
df.dtypes

"""6. Apply proper data type conversion."""

iris_df = pd.read_csv('Iris.csv')
iris_df

iris_df.dtypes

iris_df['SepalLengthCm'] = iris_df['SepalLengthCm'].astype('float16')

iris_df.dtypes

iris_df['SepalLengthCm'] = iris_df['SepalLengthCm'].astype('int')

iris_df.dtypes

"""7. Convert categorical variables into quantitative variables using one hot encoding and label encoder."""

#check unique values in a 'Species' column
print("Unique values in a 'Species' column")
pd.unique(df['Species'])

#label encoder
from sklearn import preprocessing
# Using .fit_transform function to fit label encoder and return encoded label
encoder = preprocessing.LabelEncoder()
df['Species'] = encoder.fit_transform(df['Species'])
df

#One hot encoding with Sklearn
#We can implement a similar functionality with Sklearn, which provides an object/function for one-hot encoding in the preprocessing module.
enc = preprocessing.OneHotEncoder()
df['Species'] = encoder.fit_transform(df["Species"])
df

#One hot encoding with Pandas
#We don’t have to one hot encode manually. The Python library Pandas provides a function called get_dummies to enable one-hot encoding.
one_hot=pd.get_dummies(df['Species'])
one_hot

df2 = pd.concat([df, one_hot], axis=1).reindex(df.index)
df2

df3 = one_hot.astype(int)
df3

df2 = pd.concat([df, df3], axis=1).reindex(df.index)
df2

print(df.columns)

"""1. Use one-hot encoding: When the categorical feature has no order or is not ordinal. For example, the city where a person is in is not ordinal so one-hot encoding can be used for such types of columns. When the number of unique categorical features is less. This is because more features increase the model’s complexity and training time.
2. Use label encoding: When the categorical feature has some order or is ordinal. For example, an army’s position is ordinal and the highest position has a high number. When the number of categories is large.
"""

# using .get_dummies function to convert the categorical datatype to numerical and storing the returned dataFrame in a new variable df1
df1 = pd.get_dummies(df['Species'])
# using pd.concat to concatenate the dataframes df and df1 and storing the concatenated dataFrame in df.
df5 = pd.concat([df, df1], axis=1).reindex(df.index)
# removing the column 'Purchased' from df as it is of no use now.
#df.drop('Species', axis=1, inplace=True)
# printing df
df5

# Read the CSV file into a DataFrame
data = pd.read_csv('Iris.csv')
#data.replace({'Species': {'Iris-setosa': 0, 'Iris-versicolor': 1, 'Iris-virginica': 2}}, inplace=True)
data['Species'] = data['Species'].replace(['Iris-setosa', 'Iris-versicolor', 'Iris-virginica'], [0, 1, 2])
data

