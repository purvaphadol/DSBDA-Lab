# -*- coding: utf-8 -*-
"""a6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17ayUToBOeJHXRm22IbU9bl7-6FEYtLk6

Create a Linear Regression Model using Python/R to predict home prices using Boston Housing Dataset. Find the performance of your model.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

#read csv file
df = pd.read_csv("BostonHousing.csv")
df

#Data Preprocessing
df.isnull().sum()

df['rm'].fillna(df['rm'].mean(), inplace=True)
df

df.isnull().sum()

#removing missing value
df=df.dropna()
df

# Prepare the features (X) and target variable (y)
#X = df.iloc[:, 0:12].values
#y = df.iloc[:, 13].values
X=df[['crim', 'zn', 'indus', 'chas', 'nox', 'rm', 'age', 'dis', 'rad', 'tax','ptratio', 'b', 'lstat']]
y=df["medv"]

X

y

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 25)

print("Shape of X_train: ",X_train.shape)
print("Shape of X_test: ", X_test.shape)
print("Shape of y_train: ",y_train.shape)
print("Shape of y_test",y_test.shape)

from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X_train, y_train)

y_pred= model.predict(X_test)

plt.scatter(y_test, y_pred)
plt.xlabel("True Value")
plt.ylabel("Predicted Value")
plt.title("Linear Regression")
plt.show()

#MSE measures the average squared difference between the actual and predicted values in a regression problem.
#It is calculated by taking the average of the squared differences between the predicted values and the actual values.
from sklearn.metrics import mean_squared_error
e = mean_squared_error(y_test, y_pred)
print("Mean Squared Error: ",e)

#R2 score measures the proportion of the variance in the dependent variable that is predictable from the independent variables.
#It is a relative measure of fit that compares the performance of the model against a simple baseline model that always predicts the mean of the dependent variable.
from sklearn.metrics import r2_score
r2 = r2_score(y_test, y_pred)
print("R-squared (R2) Score:", r2)

def plot_regression_results(y_true, y_pred):
    plt.figure(figsize=(8, 6))
    plt.scatter(y_true, y_true, color='blue', label='True Values')
    plt.scatter(y_true, y_pred, color='red', label='Predicted Values')
    plt.xlabel('True Values')
    plt.ylabel('Predicted Values')
    plt.title('True Values vs Predicted Values')
    plt.legend()
    plt.show()

plot_regression_results(y_test, y_pred)

