# -*- coding: utf-8 -*-
"""a2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gEQGOtPRminimofO7BdnDV62FHcCK7w5

Perform the following operations using Python by creating student performance dataset.
1. Display Missing Values.
2. Replace missing values using any 2 suitable.
3. Identify outliers using boxplot and scatterplot.
4. Handle outlier using any technique.
5. Perform any 2 data normalization technique.
"""

# Commented out IPython magic to ensure Python compatibility.
# Import the required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

# Read the csv file
df = pd.read_csv("academicperformance.csv")
df

"""1. Display Missing Values."""

df.isnull().sum()

#Select Rows with NaN Values in Any Column
df[df.isnull().any(axis=1)]

"""2. Replace missing values using any 2 suitable."""

#The fillna() method replaces the NULL values with a specified value (here replace with 0 (zero)).
df['Femarks'].fillna(0, inplace=True)
df

# Finding the mean of the column having NaN
#The fillna() method replaces the NULL values with a specified value (here replace with mean).
mean_value = df['SEMarks'].mean()
print(mean_value)

df['SEMarks']=df['SEMarks'].fillna(mean_value)
df

#The fillna() method replaces the NULL values with a specified value (here replace with 'Missing').
df['Temarks']=df['Temarks'].fillna('Missing')
df

#dropping rows having missing value
df=df.dropna()

df.isnull().sum()

"""3. Identify outliers using boxplot and scatterplot.

If there are outliers, use any of the suitable techniques to deal with them. Apply data transformations on at least one of the variables.
Box plot / IQR
Scatter plot
Z score

1. Boxplot/ IQR
"""

#drawing boxplot for Femarks
sns.boxplot(x=df['Femarks'])

#calculating q1,q2,IQR, lowerbouundry and upperboundry
q1 = df['Femarks'].quantile(0.25)
q3 = df['Femarks'].quantile(0.75)
iqr = q3 - q1    #Interquartile range
lower_boundary = q1 - (1.5*iqr)
upper_boundary = q3 + (1.5*iqr)
print("IQR", iqr, "Lower and upper boundry ",lower_boundary,upper_boundary )

outliers = df[(df['Femarks'] < lower_boundary) | (df['Femarks'] > upper_boundary)]
outliers

# drop rows containing outliers
df = df.drop(outliers.index)
df

df.reindex(df.index)

sns.boxplot(x=df['Femarks'])

"""4. Handle outlier using any technique."""

# change vale to create outliers
df.at[7,"SEMarks"]=20
df

"""2. Scatter Plot"""

sns.scatterplot(x='Femarks', y='SEMarks', data=df)

#draw a scatter plot for finding outlier
fig, ax = plt.subplots(figsize=(6, 4))
ax.scatter(df['Femarks'], df['SEMarks'])
ax.set_xlabel('(Femarks )')
ax.set_ylabel('(SEMarks )')
plt.show()

sem2outliers = df[(df['SEMarks'] > 15)]
sem2outliers

# Finding the mean of the column having NaN
median_value = df['SEMarks'].median()
print(median_value)

#insert outlier with median value
df.at[7,'SEMarks']=median_value

#draw a scatter plot to check  outlier removal
fig, ax = plt.subplots(figsize=(6, 4))
ax.scatter(df['Femarks'], df['SEMarks'])
ax.set_xlabel('(Femarks )')
ax.set_ylabel('(SEMarks )')
plt.show()

"""3. Z-Score"""

df.at[2,'Femarks']=200
df

#insert outlier with
df.at[2,'Bemarks']=40
df

from scipy import stats
z = np.abs(stats.zscore(df['Bemarks']))
print(z)

#removing outlier naving z score > 2
#set a threshold for the z-score, specifying when a data point is considered an outlier. In this case, the threshold is set to 2.
threshold_z = 2
outliers_indices = np.where(z > threshold_z)[0]
outliers_indices
no_outliers = df.drop(outliers_indices)
print("original Dataframe Shape: ", df.shape)
print("Dataframe Shape after Removing Outliers", no_outliers.shape)
no_outliers

"""5. Perform any 2 data normalization technique."""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler, StandardScaler, PowerTransformer

# Original data distribution
plt.figure(figsize=(15, 10))
plt.subplot(3, 2, 1)
sns.histplot(df['Femarks'], kde=True, color='blue')
plt.title("Original 'FEmarks' Distribution")

plt.subplot(3, 2, 2)
sns.histplot(df['SEMarks'], kde=True, color='orange')
plt.title("Original 'SEmarks' Distribution")

plt.subplots_adjust(hspace=1)

plt.subplot(3, 2, 3)
sns.histplot(df['Bemarks'], kde=True, color='green')
plt.title("Original 'BEmarks' Distribution")

# Min-Max Scaling for 'FEmarks' column
scaler_minmax = MinMaxScaler()
df_minmax = pd.DataFrame(scaler_minmax.fit_transform(df[['Femarks']]), columns=['Femarks'])

# Z-Score Normalization for 'TEmarks' column
scaler_zscore = StandardScaler()
df_zscore = pd.DataFrame(scaler_zscore.fit_transform(df[['SEMarks']]), columns=['SEMarks'])

# Decimal Normalization for 'BEmarks' column
scaler_decimal = PowerTransformer()
df_decimal = pd.DataFrame(scaler_decimal.fit_transform(df[['Bemarks']]), columns=['Bemarks'])

# Normalized data distribution
plt.figure(figsize=(15, 10))

plt.subplot(3, 2, 1)
sns.histplot(df_minmax['Femarks'], kde=True, color='blue')
plt.title("Min-Max Scaled 'FEmarks' Distribution")

plt.subplot(3, 2, 2)
sns.histplot(df_zscore['SEMarks'], kde=True, color='orange')
plt.title("Z-Score Normalized 'SEmarks' Distribution")

plt.subplot(3, 2, 3)
sns.histplot(df_decimal['Bemarks'], kde=True, color='green')
plt.title("Decimal Normalized 'BEmarks' Distribution")

plt.tight_layout()
plt.show()

scaler = MinMaxScaler()
df['SE_minmax'] = scaler.fit_transform(df[['SEMarks']])

zscore=StandardScaler()
df['SE_zscore'] = zscore.fit_transform(df[['SEMarks']])

df

