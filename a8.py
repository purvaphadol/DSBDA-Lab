# -*- coding: utf-8 -*-
"""a8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qugCd8heBs8MA9t3MbrmeqCqx4eqCHu8

Create a Naïve Bayes classification model using Python on on social network ads.csv   dataset. Compute Confusion matrix to find TP, FP, TN, FN, Accuracy, Error rate, Precision, Recall on the given dataset.
"""

import pandas as pd
import matplotlib.pyplot as plt

# Load the dataset
ads_df = pd.read_csv('Social_Network_Ads.csv')
ads_df

ads_df.isnull().sum()

# Split the dataset into features (X) and target variable (y)
X = ads_df[['Age', 'EstimatedSalary']]
y = ads_df['Purchased']

# Split the data into training and testing sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the Naïve Bayes classifier
from sklearn.naive_bayes import GaussianNB
nb_classifier = GaussianNB()
nb_classifier.fit(X_train, y_train)

# Make predictions on the test set
y_pred = nb_classifier.predict(X_test)

# Compute Confusion matrix
from sklearn.metrics import confusion_matrix
conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(conf_matrix)

# Compute evaluation metrics
from sklearn.metrics import accuracy_score, precision_score, recall_score
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
error_rate = 1 - accuracy

print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("Error Rate:", error_rate)

from sklearn.metrics import ConfusionMatrixDisplay
disp = ConfusionMatrixDisplay(confusion_matrix=conf_matrix)
disp.plot()
plt.show()

def get_confusion_matrix_values(y_test, y_pred):
    conf_matrix = confusion_matrix(y_test, y_pred)
    return (conf_matrix[0][0], conf_matrix[0][1],conf_matrix[1][0], conf_matrix[1][1])

TN, FP, FN, TP = get_confusion_matrix_values(y_test, y_pred)
print("TN:", TN)
print("FP:", FP)
print("FN:", FN)
print("TP:", TP)

print("The Accuracy is: ", (TP+TN)/(TP+FP+TN+FN))
print("The Precision is: ", (TP/(TP+FP)))
print("The Recall is: ", (TP/(TP+FN)))

"""True Positives (TP): These are the cases where the model predicted the positive class correctly, and the actual class was also positive.
False Positives (FP): These are the cases where the model predicted the positive class incorrectly (predicted as positive), but the actual class was negative.
True Negatives (TN): These are the cases where the model predicted the negative class correctly, and the actual class was also negative.
False Negatives (FN): These are the cases where the model predicted the negative class incorrectly (predicted as negative), but the actual class was positive.
"""